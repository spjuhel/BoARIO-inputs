import pathlib

include: "./rules/common.smk"
configfile: "workflow/config.json"

ruleorder: generate_mrio_full_from_zip > mrio_sector_aggreg
ruleorder: mrio_sector_aggreg > mrio_one_region_RoW_aggreg

xps_names = []
xps = {}
exps_jsons = pathlib.Path(config['EXPS_JSONS'])
for xp in config['EXPS']:
    with (exps_jsons/xp).open('r') as f:
        dico = json.load(f)
        xps[dico['FOLDER']] = dico
        xps_names.append(dico['FOLDER'])

test = {
    "REGIONS" : "FR",
    "MRIOTYPES" : "Full",
    "FLOOD_DMG" : 200000,
    "FLOOD_INT" : 0,
    "PSI" : "0_99",
    "INV_TAU" : 60,
    "INV_TIME": 90
}

run_output_files = [
    "indexes.json",
    "classic_demand_record",
    "final_demand_unmet_record",
    "iotable_X_max_record",
    "iotable_XVA_record",
    "limiting_stocks_record",
    "overprodvector_record",
    "rebuild_demand_record",
    "rebuild_prod_record",
    "simulated_events.json",
    "simulated_params.json",
    "simulation.log"]

to_move_files = [
    "indexes.json",
    "classic_demand_record",
    "final_demand_unmet_record",
    "iotable_X_max_record",
    "iotable_XVA_record",
    "limiting_stocks_record",
    "overprodvector_record",
    "rebuild_demand_record",
    "rebuild_prod_record",
    "simulated_events.json",
    "simulated_params.json",
    "simulation.log",
    "indicators.json",
    "treated_df_limiting.parquet",
    "treated_df_loss.parquet",
    "prod_df.parquet",
    "c_demand_df.parquet",
    "prod_chg.json",
    "fd_loss.json"
]


RUNS = [runs(xp) for folder, xp in xps.items()]

wildcard_constraints:
    run_type="raw|int",
    #region="[A−Z]{2,3}",
    #subregion="^$|[A-Z]{2,3}\d{1,2}",
    stype="Full|Subregions|RoW"

onstart:
     check_config(config)

rule all_xp:
    input:
        RUNS

rule mv_to_final:
    input:
        expand("{out}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_{{stype}}_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=to_move_files)
    params:
        final_dir = config["LONG_TERM_DIR"],
        output_dir = config["OUTPUT_DIR"]
    resources:
        mem_mb = 500,
        vmem_mb = 500
    output:
        expand("{out}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_{{stype}}_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["LONG_TERM_DIR"],
               files=to_move_files)
    shell:
        """
        mkdir -p {params.final_dir}/{wildcards.xp_folder}/{wildcards.mrio_used}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.run_type}_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/;
        cp {params.output_dir}/{wildcards.xp_folder}/{wildcards.mrio_used}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.run_type}_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/* {params.final_dir}/{wildcards.xp_folder}/{wildcards.mrio_used}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.run_type}_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/
        """

rule indicators:
    input:
        expand("{inp}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_{{stype}}_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               inp=config["OUTPUT_DIR"],
               files=run_output_files)
    output:
        expand("{out}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_{{stype}}_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
                   "indicators.json",
                   "treated_df_limiting.parquet",
                   "treated_df_loss.parquet",
                   "prod_df.parquet",
                   "c_demand_df.parquet",
                   "prod_chg.json",
                   "fd_loss.json"])
    conda:
        "env/ario3.yml"
    resources:
        vmem_mb=15000,
        mem_mb = 12000,
        disk_mb=500
    shell:
        """
        cd {config[ARIO_DIR]};
        nice -n 10 python ./scripts/indicator_from_folder.py '{config[OUTPUT_DIR]}/{wildcards.xp_folder}/{wildcards.mrio_used}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.run_type}_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/'
        """

def run_inputs(wildcards):
    xp_config = xps[wildcards.xp_folder]
    return {
        "mrio" : expand("{inputdir}/mrios/{{mrio_used}}.pkl",inputdir=config["BUILDED_DATA_DIR"]),
        "event_template" : expand("{maindir}/../exps/{expfolder}/{{mrio_used}}_event_template.json",maindir=config["CONFIG_DIR"], expfolder=xp_config["FOLDER"]),
        "params_template" : expand("{inputdir}/{params_template}",inputdir=config["CONFIG_DIR"], params_template=xp_config["PARAMS_TEMPLATE"]),
        "mrio_params" : expand("{inputdir}/mrios/{{mrio_used}}_params.json",inputdir=config["BUILDED_DATA_DIR"]),
        "flood_gdp" : expand("{datadir}/{flood_gdp_file}",datadir=config["SOURCE_DATA_DIR"],flood_gdp_file=xp_config["FLOOD_GDP_SHARE_FILE"])
    }

rule run_Full:
    input:
        unpack(run_inputs)
    output:
        expand("{out}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_Full_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=run_output_files)
    resources:
        vmem_mb=3000,
        mem_mb=2000,
        disk_mb=500
    wildcard_constraints:
        region="[A-Z]{2}"
    conda:
        "env/ario3.yml"
    params:
        output_dir = config["OUTPUT_DIR"],
    shell:
        """
        cd {config[ARIO_DIR]};
        nice -n 10 python ./scripts/mono_run.py {wildcards.region} {input.params_template} {wildcards.psi} {wildcards.inv} Full {wildcards.run_type} {wildcards.flood} {input.mrio} {params.output_dir}/{wildcards.xp_folder}/{wildcards.mrio_used} {input.flood_gdp} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """

rule run_subregions_mrio:
    input:
        unpack(run_inputs)
    output:
        expand("{out}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_Subregions_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=run_output_files)
    resources:
        vmem_mb=3000,
        mem_mb=2000,
        disk_mb=500
    wildcard_constraints:
        region="(?:[A-Z]{2}-[A-Z]{2}\d+)|([A-Z]{2}-all)",
        mrio_used="exiobase3_(?:Full|\d+_sectors)_(?:FullWorld|[A-Z]{2}-RoW)_[A-Z]{2}_sliced_in_\d+"
    conda:
        "env/ario3.yml"
    params:
        output_dir = config["OUTPUT_DIR"],
    shell:
        """
        cd {config[ARIO_DIR]};
        nice -n 10 python ./scripts/mono_run.py {wildcards.region} {input.params_template} {wildcards.psi} {wildcards.inv} Full {wildcards.run_type} {wildcards.flood} {input.mrio} {params.output_dir}/{wildcards.xp_folder}/{wildcards.mrio_used} {input.flood_gdp} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """

rule generate_subregions_mrio:
    input:
        in_mrio = expand("{outputdir}/mrios/{{sector_aggreg_name}}_{{region_aggreg_name}}.pkl",outputdir=config["BUILDED_DATA_DIR"]),
        mrio_params = expand("{outputdir}/mrios/{{sector_aggreg_name}}_{{region_aggreg_name}}_params.json",outputdir=config["BUILDED_DATA_DIR"])
    output:
        out_mrio = expand("{outputdir}/mrios/{{sector_aggreg_name}}_{{region_aggreg_name}}_{{subregions}}.pkl",outputdir=config["BUILDED_DATA_DIR"]),
        out_params = expand("{outputdir}/mrios/{{sector_aggreg_name}}_{{region_aggreg_name}}_{{subregions}}_params.json",outputdir=config["BUILDED_DATA_DIR"])
    conda:
        "env/ario3.yml"
    wildcard_constraints:
        sector_aggreg_name="exiobase3_(?:Full|\d+_sectors)",
        region_aggreg_name="FullWorkd|[A-Z]{2}-RoW",
#        subregions="[A−Z]{2}_sliced_in_\d*"
    resources:
        vmem_mb=6000,
        mem_mb=5000,
        disk_mb=2000
    shell:
        """
        nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/mrio_subregions.py {input.in_mrio} {wildcards.subregions} {input.mrio_params} -o {output.out_mrio} -po {output.out_params}
        """

rule generate_mrio_full_from_zip:
    input:
        mrio_file = expand("{inputfile}",inputfile=config["IOT_zip_file"]),
        full_mrio_params = expand("{outputdir}/mrios/exiobase3_full_params.json",outputdir=config["BUILDED_DATA_DIR"])
    conda:
        "env/ario3.yml"
    output:
        mrioout = expand("{outputdir}/mrios/exiobase3_full.pkl",outputdir=config["BUILDED_DATA_DIR"])
    resources:
        vmem_mb=6000,
        mem_mb=5000,
        disk_mb=2000
    shell:
        """
        nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/build_pkl.py -o {output.mrioout} {input.mrio_file};
        """

rule mrio_sector_aggreg:
    input:
        full_mrio_file = rules.generate_mrio_full_from_zip.output.mrioout,
        full_mrio_params = expand("{outputdir}/mrios/exiobase3_full_params.json",outputdir=config["BUILDED_DATA_DIR"]),
        sector_aggreg_file = expand("{inputdir}/{{sector_aggreg_name}}.ods",inputdir=config["AGGREG_FILES_DIR"])
    conda:
        "env/ario3.yml"
    output:
        out_mrio = expand("{outputdir}/mrios/{{sector_aggreg_name}}_FullWorld.pkl",outputdir=config["BUILDED_DATA_DIR"]),
        out_params = expand("{outputdir}/mrios/{{sector_aggreg_name}}_FullWorld_params.json",outputdir=config["BUILDED_DATA_DIR"])
    wildcard_constraints:
        #sector_aggreg_name="(.(?!(full)))*"
        sector_aggreg_name="exiobase3_\d+_sectors"
    resources:
        vmem_mb=6000,
        mem_mb=5000,
        disk_mb=2000
    shell:
        """
        nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/aggreg_exio3_sectors.py {input.full_mrio_file} {input.sector_aggreg_file} {input.full_mrio_params} -o {output.out_mrio} -po {output.out_params}
        """

rule mrio_one_region_RoW_aggreg:
    input:
        mrio_file = expand("{outputdir}/mrios/{{mrio}}_FullWorld.pkl",outputdir=config["BUILDED_DATA_DIR"]),
        region_aggreg_file = expand("{inputdir}/aggreg/{{region}}_aggreg.json",inputdir=config["BUILDED_DATA_DIR"]),
        old_mrio_params = expand("{outputdir}/mrios/{{mrio}}_FullWorld_params.json",outputdir=config["BUILDED_DATA_DIR"])
    conda:
         "env/ario3.yml"
    output:
        out_mrio = expand("{outputdir}/mrios/{{mrio}}_{{region}}-RoW.pkl",outputdir=config["BUILDED_DATA_DIR"]),
        out_params = expand("{outputdir}/mrios/{{mrio}}_{{region}}-RoW_params.json",outputdir=config["BUILDED_DATA_DIR"])
    resources:
         vmem_mb=6000,
         mem_mb=5000,
         disk_mb=2000
    wildcard_constraints:
        region="[A-Z]{2}"
    shell:
         """
         nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/aggreg_exio3_region.py {input.mrio_file} {input.region_aggreg_file} {input.old_mrio_params} -o {output.out_mrio} -po {output.out_params}
         """

rule region_aggreg_dict:
    output:
        expand("{inputdir}/aggreg/{{region}}_aggreg.json",inputdir=config["BUILDED_DATA_DIR"])
    run:
        import json
        dic = {"aggregates":{str(wildcards.region):str(wildcards.region)},
            "missing":"RoW"}
        with open(output[0],'w') as f:
            json.dump(dic, f)

rule csv_raw:
    input:
        expand("{outputdir}/{files}.csv", outputdir=config["LONG_TERM_DIR"], files=["raw_dmg_general", "raw_dmg_prodloss","raw_dmg_fdloss"])

rule csv_int:
    input:
        expand("{outputdir}/{files}.csv", outputdir=config["LONG_TERM_DIR"], files=["int_dmg_general", "int_dmg_prodloss","int_dmg_fdloss"])

rule all_csv:
    input:
        expand("{outputdir}/{files}.csv", outputdir=config["LONG_TERM_DIR"], files=["all_dmg_general", "all_dmg_prodloss","all_dmg_fdloss"])

def which_runs(wildcards):
    if wildcards.run_type=="raw":
        return RAW_DMG_RUNS
    elif wildcards.run_type=="int":
        return RUNS
    elif wildcards.run_type=="all":
        return RAW_DMG_RUNS + RUNS
    else:
        raise ValueError("Unrecognized run_type.")


def csv_from_all_xp(xps):
    all_csv = []
    for xp, dico in xps.items():
        xp_type = dico["DMG_TYPE"]
        tmp = expand("{outputdir}/{expdir}/{files}.csv", outputdir=config["OUTPUT_DIR"], expdir=xp, files=[xp_type+"_general", xp_type+"_prodloss", xp_type+"_fdloss"])
        all_csv.append(tmp)
    return all_csv

rule generate_csv_from_all_xp:
    input:
        csv_from_all_xp(xps)

rule generate_csv_from_xp:
    input:
        expand("{outputdir}/{{expdir}}/", outputdir=config["OUTPUT_DIR"])
    output:
        expand("{outputdir}/{{expdir}}/{files}.csv", outputdir=config["OUTPUT_DIR"], files=["{run_type}_general", "{run_type}_prodloss","{run_type}_fdloss"])
    shell:
        """
        nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/csv_from_indicators.py {input} {wildcards.run_type} -o {config[LONG_TERM_DIR]}
        """
    conda:
        "env/ario3.yml"

rule generate_csv:
    input:
        which_runs
    output:
        expand("{outputdir}/{files}.csv", outputdir=config["LONG_TERM_DIR"], files=["{run_type}_dmg_general", "{run_type}_dmg_prodloss","{run_type}_dmg_fdloss"])
    shell:
        """
        nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/csv_from_indicators.py {config[LONG_TERM_DIR]} {wildcards.run_type} -o {config[LONG_TERM_DIR]}
        """

def run_RoW_inputs(wildcards):
    xp_config = xps[wildcards.xp_folder]
    return {
        "mrio" : expand("{inputdir}/mrios/{{mrio_used}}_{wildcards.region}.pkl",inputdir=config["BUILDED_DATA_DIR"]),
        "event_template" : expand("{maindir}/../exps/{expfolder}/{{mrio_used}}_event_template.json",maindir=config["CONFIG_DIR"],expfolder=config["FOLDER"]),
        "params_template" : expand("{inputdir}/{params_template}",inputdir=config["CONFIG_DIR"], params_template=xp_config["PARAMS_TEMPLATE"]),
        "mrio_params" : expand("{inputdir}/mrios/{{mrio_used}}_params.json",inputdir=config["BUILDED_DATA_DIR"]),
        "flood_gdp" : expand("{datadir}/{flood_gdp_file}",datadir=config["SOURCE_DATA_DIR"],flood_gdp_file=xp_config["FLOOD_GDP_SHARE_FILE"])
    }

rule run_RoW:
    input:
        unpack(run_RoW_inputs)
    output:
        expand("{out}/{{xp_folder}}/{{mrio_used}}/{{region}}_type_RoW_qdmg_{{run_type}}_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=run_output_files)
    conda:
        "env/ario3.yml"
    wildcard_constraints:
        run_type="raw|int"
    resources:
        mem_mb=4000,
        disk_mb=50,
        vmem_mb=4000
    params:
        ario_dir = config["ARIO_DIR"],
        output_dir = config["OUTPUT_DIR"],
    shell:
        """
        cd {params.ario_dir};
        nice -n 10 python ./scripts/mono_run.py {wildcards.region} {input.params_template} {wildcards.psi} {wildcards.inv} RoW {wildcards.run_type} {wildcards.flood} {input.mrio} {params.output_dir}/{wildcards.xp_folder}/{wildcards.mrio_used} {input.flood_gdp} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """
