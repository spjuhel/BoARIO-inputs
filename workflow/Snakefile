include: "./rules/common.smk"
configfile: "workflow/config.json"
check_config(config)

def raw_dmg_runs():
    if config["LONG_TERM_DIR"] == config["OUTPUT_DIR"]:
        return expand("{out}/{region}_type_{stype}_qdmg_raw_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/indicators.json",
                      out=config["OUTPUT_DIR"],
                      region=config["REGIONS"],
                      stype=config["TYPES"],
                      flood=config["FLOOD_DMG"],
                      psi=config["PSI"],
                      inv=config["INV_TAU"],
                      inv_t=config["INV_TIME"])
    else :
        return expand("{out}/{region}_type_{stype}_qdmg_raw_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/indicators.json",
                      out=config["LONG_TERM_DIR"],
                      region=config["REGIONS"],
                      stype=config["TYPES"],
                      flood=config["FLOOD_DMG"],
                      psi=config["PSI"],
                      inv=config["INV_TAU"],
                      inv_t=config["INV_TIME"])

def runs():
    if config["LONG_TERM_DIR"] == config["OUTPUT_DIR"]:
        return expand("{out}/{region}_type_{stype}_qdmg_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/indicators.json",
                      out=config["OUTPUT_DIR"],
                      region=config["REGIONS"],
                      stype=config["TYPES"],
                      flood=config["FLOOD_INT"],
                      psi=config["PSI"],
                      inv=config["INV_TAU"],
                      inv_t=config["INV_TIME"])
    else :
        return expand("{out}/{region}_type_{stype}_qdmg_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/indicators.json",
                      out=config["LONG_TERM_DIR"],
                      region=config["REGIONS"],
                      stype=config["TYPES"],
                      flood=config["FLOOD_INT"],
                      psi=config["PSI"],
                      inv=config["INV_TAU"],
                      inv_t=config["INV_TIME"])

RAW_DMG_RUNS = raw_dmg_runs()

RUNS = runs()

PROD_INDICATORS_RUNS = expand("{out}/{region}_type_{stype}_qdmg_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/prod_chg.json",
                              out=config["OUTPUT_DIR"],
                              region=config["REGIONS"],
                              stype=config["TYPES"],
                              flood=config["FLOOD_INT"],
                              psi=config["PSI"],
                              inv=config["INV_TAU"],
                              inv_t=config["INV_TIME"])

TEST_RUN_FULL = expand("{out}/{region}_type_{stype}_qdmg_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/indicators.json",
                       out=config["OUTPUT_DIR"],
                       region=config["REGIONS"][0],
                       stype=config["TYPES"][0],
                       flood=config["FLOOD_INT"][0],
                       psi=config["PSI"][0],
                       inv=config["INV_TAU"][0],
                       inv_t=config["INV_TIME"][0])

rule all_raw:
    input:
        RAW_DMG_RUNS

rule all_intensity:
    input:
        RUNS

rule test:
    input:
        TEST_RUN_FULL

rule all_prod_indicators:
    input:
        PROD_INDICATORS_RUNS

rule all_indicators_json:
    input:
        expand("{out}/{region}_type_{stype}_qdmg_{flood}_Psi_{psi}_inv_tau_{inv}_inv_time_{inv_t}/indicators.json",
               out=config["OUTPUT_DIR"],
               region=config["REGIONS"],
               stype=config["TYPES"],
               flood=config["FLOOD_INT"],
               psi=config["PSI"],
               inv=config["INV_TAU"],
               inv_t=config["INV_TIME"])

rule mv_to_final:
    input:
        expand("{out}/{{region}}_type_{{stype}}_qdmg_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
            "indexes.json",
            "classic_demand_record",
            "final_demand_unmet_record",
            "iotable_X_max_record",
            "iotable_XVA_record",
            "limiting_stocks_record",
            "overprodvector_record",
            "rebuild_demand_record",
            "rebuild_prod_record",
            "simulated_events.json",
            "simulated_params.json",
            "simulation.log",
            "indicators.json",
            "treated_df_limiting.parquet",
            "treated_df_loss.parquet",
            "prod_df.parquet",
            "c_demand_df.parquet",
            "prod_chg.json",
            "fd_loss.json"
        ])
    params:
        final_dir = config["LONG_TERM_DIR"],
        output_dir = config["OUTPUT_DIR"]
    resources:
        mem_mb = 500,
        vmem_mb = 500
    output:
        expand("{out}/{{region}}_type_{{stype}}_qdmg_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["LONG_TERM_DIR"],
               files=[
                   "indexes.json",
                   "classic_demand_record",
                   "final_demand_unmet_record",
                   "iotable_X_max_record",
                   "iotable_XVA_record",
                   "limiting_stocks_record",
                   "overprodvector_record",
                   "rebuild_demand_record",
                   "rebuild_prod_record",
                   "simulated_events.json",
                   "simulated_params.json",
                   "simulation.log",
                   "indicators.json",
                   "treated_df_limiting.parquet",
                   "treated_df_loss.parquet",
                   "prod_df.parquet",
                   "c_demand_df.parquet",
                   "prod_chg.json",
                   "fd_loss.json"
               ])
    shell:
        """
        mkdir -p {params.final_dir}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/;
        cp {params.output_dir}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/* {params.final_dir}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/
        """

rule indicators:
    input:
        expand("{inp}/{{region}}_type_{{stype}}_qdmg_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               inp=config["OUTPUT_DIR"],
               files=[
                   "indexes.json",
                   "classic_demand_record",
                   "final_demand_unmet_record",
                   "iotable_X_max_record",
                   "iotable_XVA_record",
                   "limiting_stocks_record",
                   "overprodvector_record",
                   "rebuild_demand_record",
                   "rebuild_prod_record",
                   "simulated_events.json",
                   "simulated_params.json",
                   "simulation.log"]
               )
    output:
        expand("{out}/{{region}}_type_{{stype}}_qdmg_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
                   "indicators.json",
                   "treated_df_limiting.parquet",
                   "treated_df_loss.parquet",
                   "prod_df.parquet",
                   "c_demand_df.parquet",
                   "prod_chg.json",
                   "fd_loss.json"])
    conda:
        "env/ario3.yml"
    resources:
        vmem_mb=15000,
        mem_mb = 12000,
        disk_mb=500
    shell:
        """
        cd {config[ARIO_DIR]};
        nice -n 10 python ./scripts/indicator_from_folder.py '{config[OUTPUT_DIR]}/{wildcards.region}_type_{wildcards.stype}_qdmg_{wildcards.flood}_Psi_{wildcards.psi}_inv_tau_{wildcards.inv}_inv_time_{wildcards.inv_t}/'
        """

rule run_RoW:
    input:
        mrio = expand("{inputdir}/mrios/mrio_{{region}}.pkl",inputdir=config["BUILDED_DATA_DIR"]),
        event_template = expand("{inputdir}/event_template_snakemake.json",inputdir=config["CONFIG_DIR"]),
        params_file = expand("{inputdir}/params_snakemake.json",inputdir=config["CONFIG_DIR"]),
        mrio_params = expand("{inputdir}/mrio_params_snakemake.json",inputdir=config["CONFIG_DIR"])
    output:
        expand("{out}/{{region}}_type_RoW_qdmg_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
                   "indexes.json",
                   "classic_demand_record",
                   "final_demand_unmet_record",
                   "iotable_X_max_record",
                   "iotable_XVA_record",
                   "limiting_stocks_record",
                   "overprodvector_record",
                   "rebuild_demand_record",
                   "rebuild_prod_record",
                   "simulated_events.json",
                   "simulated_params.json",
                   "simulation.log"])
    conda:
        "env/ario3.yml"
    wildcard_constraints:
        flood="max|min|\d{1,2}%"
    resources:
        mem_mb=4000,
        disk_mb=50
    params:
        mrios_path = config["BUILDED_DATA_DIR"]+"/mrios/",
        ario_dir = config["ARIO_DIR"],
        output_dir = config["OUTPUT_DIR"],
        flood_gdp = config["FLOOD_GDP_SHARE_FILE"]
    shell:
        """
        cd {params.ario_dir};
        nice -n 10 python ./scripts/mono_run.py {wildcards.region} {input.params_file} {wildcards.psi} {wildcards.inv} RoW {wildcards.flood} {params.mrios_path} {params.output_dir} {params.flood_gdp} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """

rule run_RoW_dmg:
    input:
        mrio = expand("{inputdir}/mrios/mrio_{{region}}.pkl",inputdir=config["BUILDED_DATA_DIR"]),
        event_template = expand("{inputdir}/event_template_snakemake.json",inputdir=config["CONFIG_DIR"]),
        params_file = expand("{inputdir}/params_snakemake.json",inputdir=config["CONFIG_DIR"]),
        mrio_params = expand("{inputdir}/mrio_params_snakemake.json",inputdir=config["CONFIG_DIR"])
    output:
        expand("{out}/{{region}}_type_RoW_qdmg_raw_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
                   "indexes.json",
                   "classic_demand_record",
                   "final_demand_unmet_record",
                   "iotable_X_max_record",
                   "iotable_XVA_record",
                   "limiting_stocks_record",
                   "overprodvector_record",
                   "rebuild_demand_record",
                   "rebuild_prod_record",
                   "simulated_events.json",
                   "simulated_params.json",
                   "simulation.log"])
    conda:
        "env/ario3.yml"
    wildcard_constraints:
        flood="\d+"
    resources:
        mem_mb=4000,
        disk_mb=50
    params:
        mrios_path = config["BUILDED_DATA_DIR"]+"/mrios/",
        ario_dir = config["ARIO_DIR"],
        output_dir = config["OUTPUT_DIR"]
    shell:
        """
        cd {params.ario_dir};
        nice -n 10 python ./scripts/mono_run_dmg.py {wildcards.region} {input.params_file} {wildcards.psi} {wildcards.inv} RoW {wildcards.flood} {params.mrios_path} {params.output_dir} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """

rule run_Full_dmg_raw:
    input:
        mrio = expand("{inputdir}/mrios/mrio_full.pkl",inputdir=config["BUILDED_DATA_DIR"]),
        event_template = expand("{inputdir}/event_template_snakemake.json",inputdir=config["CONFIG_DIR"]),
        params_file = expand("{inputdir}/params_snakemake.json",inputdir=config["CONFIG_DIR"]),
        mrio_params = expand("{inputdir}/mrio_params_snakemake.json",inputdir=config["CONFIG_DIR"])
    wildcard_constraints:
        flood="\d+"
    output:
        expand("{out}/{{region}}_type_Full_qdmg_raw_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
                   "indexes.json",
                   "classic_demand_record",
                   "final_demand_unmet_record",
                   "iotable_X_max_record",
                   "iotable_XVA_record",
                   "limiting_stocks_record",
                   "overprodvector_record",
                   "rebuild_demand_record",
                   "rebuild_prod_record",
                   "simulated_events.json",
                   "simulated_params.json",
                   "simulation.log"])
    resources:
        vmem_mb=3000,
        mem_mb=2000,
        disk_mb=500
    conda:
        "env/ario3.yml"
    params:
        mrios_path = config["BUILDED_DATA_DIR"]+"/mrios/",
        output_dir = config["OUTPUT_DIR"],
        flood_gdp = config["FLOOD_GDP_SHARE_FILE"]
    shell:
        """
        cd {config[ARIO_DIR]};
        nice -n 10 python ./scripts/mono_run_dmg.py {wildcards.region} {input.params_file} {wildcards.psi} {wildcards.inv} Full {wildcards.flood} {params.mrios_path} {params.output_dir} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """

rule run_Full:
    input:
        mrio = expand("{inputdir}/mrios/mrio_full.pkl",inputdir=config["BUILDED_DATA_DIR"]),
        event_template = expand("{inputdir}/event_template_snakemake.json",inputdir=config["CONFIG_DIR"]),
        params_file = expand("{inputdir}/params_snakemake.json",inputdir=config["CONFIG_DIR"]),
        mrio_params = expand("{inputdir}/mrio_params_snakemake.json",inputdir=config["CONFIG_DIR"])
    output:
        expand("{out}/{{region}}_type_Full_qdmg_{{flood}}_Psi_{{psi}}_inv_tau_{{inv}}_inv_time_{{inv_t}}/{files}",
               out=config["OUTPUT_DIR"],
               files=[
                   "indexes.json",
                   "classic_demand_record",
                   "final_demand_unmet_record",
                   "iotable_X_max_record",
                   "iotable_XVA_record",
                   "limiting_stocks_record",
                   "overprodvector_record",
                   "rebuild_demand_record",
                   "rebuild_prod_record",
                   "simulated_events.json",
                   "simulated_params.json",
                   "simulation.log"])
    wildcard_constraints:
        flood="max|min|\d{1,2}%"
    resources:
        vmem_mb=3000,
        mem_mb=2000,
        disk_mb=500
    conda:
        "env/ario3.yml"
    params:
        mrios_path = config["BUILDED_DATA_DIR"]+"/mrios/",
        output_dir = config["OUTPUT_DIR"],
        flood_gdp = config["FLOOD_GDP_SHARE_FILE"]
    shell:
        """
        cd {config[ARIO_DIR]};
        nice -n 10 python ./scripts/mono_run.py {wildcards.region} {input.params_file} {wildcards.psi} {wildcards.inv} Full {wildcards.flood} {params.mrios_path} {params.output_dir} {params.flood_gdp} {input.event_template} {input.mrio_params} {wildcards.inv_t}
        """

rule mrio_full:
    input:
        mrio_file = expand("{inputfile}",inputfile=config["IOT_zip_file"]),
        sector_aggreg_file = expand("{inputdir}/133_74_sector_aggregation_exiobase3.ods",inputdir=config["SOURCE_DATA_DIR"]),
        sector_renaming_file = expand("{inputdir}/sector_renaming_74.json",inputdir=config["CONFIG_DIR"])
    conda:
        "env/ario3.yml"
    output:
        expand("{outputdir}/mrios/mrio_full.pkl",outputdir=config["BUILDED_DATA_DIR"])
    resources:
        vmem_mb=6000,
        mem_mb=5000,
        disk_mb=2000
    shell:
        """
        nice -n 10 python {config[ARIO_DIR]}/scripts/aggreg_exio3.py -o {output} {input.mrio_file} {input.sector_aggreg_file} {input.sector_renaming_file}
        """

rule mrio_region:
    input:
        mrio_file = expand("{inputfile}",inputfile=config["IOT_zip_file"]),
        sector_aggreg_file = expand("{inputdir}/133_74_sector_aggregation_exiobase3.ods",inputdir=config["SOURCE_DATA_DIR"]),
        sector_renaming_file = expand("{inputdir}/sector_renaming_74.json",inputdir=config["CONFIG_DIR"]),
        region_aggreg_file = expand("{inputdir}/aggreg/{{region}}_aggreg.json",inputdir=config["BUILDED_DATA_DIR"])
    conda:
        "env/ario3.yml"
    output:
        expand("{outputdir}/mrios/mrio_{{region}}.pkl",outputdir=config["BUILDED_DATA_DIR"])
    resources:
        vmem_mb=6000,
        mem_mb=5000,
        disk_mb=2000
    shell:
        """
        nice -n 10 python {config[INPUTS_GENERATION_SCRIPTS_DIR]}/aggreg_exio3.py -o {output} {input.mrio_file} {input.sector_aggreg_file} {input.sector_renaming_file} {input.region_aggreg_file}
        """

rule region_aggreg_dict:
    output:
        expand("{inputdir}/aggreg/{{region}}_aggreg.json",inputdir=config["BUILDED_DATA_DIR"])
    run:
        import json
        dic = {"aggregates":{str(wildcards.region):str(wildcards.region)},
            "missing":"RoW"}
        with open(output[0],'w') as f:
            json.dump(dic, f)
